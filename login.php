<?php //inicio de sesion PHP
session_start(); //inicia o contin√∫a una sesi√≥n PHP para almacenar variables en $_SESSION. Esto permite mantener informaci√≥n del usuario mientras navega entre p√°ginas.

// üîí Encabezados para evitar cache del navegador
header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");
header("Expires: 0");

// Mostrar mensaje si la sesi√≥n expir√≥
if (isset($_GET['expired'])) { //$_GET es una variable superglobal predefinida en PHP, igual que $_SESSION, pero con otro prop√≥sito
/*isset() ‚Üí verifica si existe esa variable. Si existe, imprime un mensaje en color rojo avisando que la sesi√≥n caduc√≥.

Almacena datos enviados en la URL mediante el m√©todo GET.  

C√≥mo funciona $_GET['expired']:
Cuando haces algo como: header("Location: login.php?expired=1"); Que esta en mi sesion.php
Est√°s redirigiendo a login.php y pasando un par√°metro expired en la URL.
PHP autom√°ticamente coloca este valor en la superglobal $_GET:
$_GET['expired']; // contiene '1'
or eso, luego puedes hacer:

if (isset($_GET['expired'])) {
    echo "Tu sesi√≥n expir√≥";
}
Significa: ‚Äúsi en la URL hay un par√°metro llamado expired, muestra el mensaje‚Äù. 
*/
    echo "<p style='color:red;'>Tu sesi√≥n expir√≥, vuelve a iniciar sesi√≥n.</p>"; // Si existe, imprime un mensaje en color rojo avisando que la sesi√≥n caduc√≥.
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// üîí Si ya existe sesi√≥n activa, redirige autom√°ticamente
if (isset($_SESSION['user'])) {  //Comprueba si la sesi√≥n ya tiene el usuario ($_SESSION['user']).
    header("Location: formulario.php"); //Si ya est√° logueado, lo redirige autom√°ticamente a la p√°gina interna formulario.php.
    exit; //detiene el script
}

$error = ''; //Variable para almacenar mensajes de error de login. Inicialmente est√° vac√≠a, se llenar√° si el usuario pone mal credenciales.

//Verificar si envio el formulario. 
if ($_SERVER['REQUEST_METHOD'] == 'POST') { //$_SERVER variable superglobal que contiene informaci√≥n del servidor y del entorno HTTP.

/* $_SERVER['REQUEST_METHOD'] ‚Üí M√©todo HTTP usado por el navegador al hacer la petici√≥n (GET, POST, PUT, etc.)
En este caso es == 'POST' ‚Üí significa: ‚Äúsi la p√°gina fue enviada mediante el m√©todo POST‚Äù.
Esto evita que el c√≥digo de login se ejecute si alguien solo abre la p√°gina sin enviar el formulario.
//POST es uno de los m√©todos HTTP que usan los navegadores para enviar datos a un servidor.
Se usa principalmente cuando quieres enviar informaci√≥n que no debe aparecer en la URL, como contrase√±as, formularios o archivos.
Comparaci√≥n == 'POST' ‚Üí asegura que este bloque solo se ejecute cuando el usuario env√≠a el formulario, no cuando solo carga la p√°gina.
Esto evita errores o accesos no deseados si alguien entra directamente a login.php sin enviar datos. */

    $username = $_POST['username']; //$_POST ‚Üí superglobal predefinida que contiene datos enviados desde un formulario con method="POST"
    $password = $_POST['password'];//'username' y 'password' ‚Üí son los nombres de los inputs en el HTML. Ahora $username y $password contienen los valores que el usuario escribi√≥.

    // Servidor y base de AD
    $ldap_server = "ldap://AZRUSE2DOM2.global.borgwarner.net";  //$ldap_server ‚Üí direcci√≥n del servidor Active Directory (LDAP).
    $ldap_dn_base = "DC=global,DC=borgwarner,DC=net"; //$ldap_dn_base ‚Üí base DN (‚ÄúDistinguished Name‚Äù) que define desde d√≥nde buscar usuarios en el directorio. La variable $ldap_conn guarda la conexi√≥n.
//Esto es necesario para que PHP sepa d√≥nde autenticar al usuario.

    // Conexi√≥n al servidor  LDAP
    $ldap_conn = ldap_connect($ldap_server); //ldap_connect($ldap_server) ‚Üí funci√≥n integrada de PHP (requiere extensi√≥n LDAP) que crea una conexi√≥n con el servidor LDAP.
    ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, 3); //ldap_set_option(..., LDAP_OPT_PROTOCOL_VERSION, 3) ‚Üí establece la versi√≥n del protocolo LDAP a usar (la versi√≥n 3 es la est√°ndar moderna).

    // Usuario completo para bind
    $ldap_user = $username . "@borgwarner.com"; //Esto es necesario porque AD espera el usuario completo en formato UPN para autenticar.

    if (@ldap_bind($ldap_conn, $ldap_user, $password)) {//ldap_bind() ‚Üí funci√≥n de PHP que intenta ‚Äúligar‚Äù la sesi√≥n con las credenciales del usuario en el AD. El @ antes de la funci√≥n ‚Üí silencia errores (no mostrar√° warnings si falla la conexi√≥n o las credenciales son incorrectas).
        // Login correcto
        $_SESSION['user'] = $username; // Guardar usuario en sesi√≥n
        $_SESSION['ultimo_acceso'] = time(); // Timestamp solo despu√©s de login v√°lido
        header("Location: formulario.php"); //si es correcto lo lleva al formulario. 
        exit;
    } else {
        $error = "Usuario o contrase√±a incorrecta.";
    }
}
?>

<!DOCTYPE html>  <!-- indica que es un documento HTML5.  -->
<html lang="es"> <!-- define el idioma de la p√°gina (espa√±ol). -->
<head> <!-- el head es una secci√≥n especial del documento donde se colocan metadatos, configuraciones y enlaces a recursos externos, pero no contiene contenido visible directamente en la p√°gina. -->
    <meta charset="UTF-8"> <!--Define la codificaci√≥n de caracteres del documento (UTF-8 es est√°ndar moderno y soporta acentos, emojis, caracteres especiales).
                           Esto evita que los textos aparezcan con s√≠mbolos extra√±os. -->
    <title>Login</title> <!-- Define el t√≠tulo de la p√°gina, que aparece en la pesta√±a del navegador.
                          No aparece dentro del contenido de la p√°gina directamente. -->
    <link rel="stylesheet" href="loginstyle.css"> <!-- Conecta la p√°gina con un archivo de hoja de estilos CSS externa (loginstyle.css) para definir c√≥mo se ve la p√°gina.
                                                   rel="stylesheet" indica que es una hoja de estilo.
                                                   href="loginstyle.css" es la ruta del archivo CSS. -->
</head> <!-- se acaba el head -->
<body> <!-- es lo que se ve en el navegador -->
    <div class="login-container"> <!-- <div> es un contenedor gen√©rico que agrupa elementos.
class="login-container" le da un nombre de clase para poder aplicar estilos CSS desde loginstyle.css.
En tu caso, sirve para centrar y dar formato al formulario de login. -->
        <h2>Login</h2> <!-- <h2> es un encabezado de segundo nivel, m√°s peque√±o que <h1>. Muestra el t√≠tulo ‚ÄúLogin‚Äù dentro del contenedor, visible en la p√°gina. --> 
        <?php if ($error !== '') echo "<p>$error</p>"; 
  /*Esto es PHP embebido en HTML.

if ($error !== '') comprueba si la variable $error contiene alg√∫n mensaje (por ejemplo, si el login fall√≥).

echo "<p>$error</p>"; imprime un p√°rrafo <p> con el mensaje de error dentro del HTML.

Resultado: si el usuario pone mal usuario o contrase√±a, ver√° el mensaje en la p√°gina
  
  */
  ?>
        <form method="POST"> <!--<form> crea un formulario interactivo.
                             method="POST" indica que los datos del formulario se enviar√°n al servidor usando el m√©todo POST, que no muestra los datos en la URL (ideal para contrase√±as). -->
            <label for="username">Usuario de BWüë§:</label> <!--<label> es una etiqueta descriptiva para un input; for="username" conecta la etiqueta con el input correspondiente. -->
            <input type="text" name="username" required><br> <!-- <input type="text" name="username" required> crea un campo de texto donde el usuario escribe su nombre.
                                                                 name="username" es el nombre que PHP usar√° para recibir el dato ($_POST['username']).
                                                                 required indica que el campo no puede quedar vac√≠o.
                                                                <br> inserta un salto de l√≠nea para separar visualmente los campos. -->
            <label for="password">Contrase√±a üîí:</label> <!-- Similar al anterior, pero con <input type="password"> que oculta lo que se escribe con puntos o asteriscos.
                                                            name="password" permitir√° acceder a la contrase√±a en PHP con $_POST['password']. -->
            <input type="password" name="password" required><br>

            <button type="submit">Entrar</button> <!--<button> crea un bot√≥n interactivo.
                                                   type="submit" indica que al presionarlo se enviar√°n los datos del formulario al servidor (al mismo archivo si no se define action).
                                                Texto ‚ÄúEntrar‚Äù aparece en el bot√≥n. -->
        </form>
    </div>
</body>
</html>
<!-- </form> cierra el formulario.

</div> cierra el contenedor de login.

</body> cierra el contenido visible de la p√°gina.

</html> cierra el documento HTML completo. --> 